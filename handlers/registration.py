import logging
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

from init import conn, cursor, create_menu_keyboard, courses


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()

    if user is None:
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await update.message.reply_text("üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.",
                                        reply_markup=ReplyKeyboardRemove())
        context.user_data['registering'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data['step'] = 'name'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def receive_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    step = context.user_data.get('step')

    if context.user_data.get('registering'):
        if step == 'name':
            name = update.message.text
            context.user_data['name'] = name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
            await update.message.reply_text(" –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ –ø–æ–ª.",
                                            reply_markup=await get_gender_keyboard_yourself())
            context.user_data['step'] = 'gender'
        elif step == 'gender':
            gender = update.message.text
            if gender in ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"]:
                context.user_data['gender'] = gender  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª
                await update.message.reply_text(" –ü–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ –≤—ã –æ–±—É—á–∞–µ—Ç–µ—Å—å.")
                context.user_data['step'] = 'course'
                await update.message.reply_text("üìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ (–æ—Ç 1 –¥–æ 6).",
                                                reply_markup=ReplyKeyboardRemove())
            else:
                await update.message.reply_text(" –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ: '–ü–∞—Ä–Ω—è' –∏–ª–∏ '–î–µ–≤—É—à–∫—É'.")
                return

        elif step == 'course':
            course_input = update.message.text
            try:
                course = int(course_input)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                if 1 <= course <= 6:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    context.user_data['course'] = course
                    await update.message.reply_text(
                        " –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ –≤—ã –æ–±—É—á–∞–µ—Ç–µ—Å—å.",
                        reply_markup=await get_course())

                    context.user_data['step'] = 'course_name'
                else:
                    await update.message.reply_text(" –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –æ—Ç 1 –¥–æ 6.")
            except ValueError:
                await update.message.reply_text(" –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞.")
        elif step == 'course_name':
            course_name = update.message.text
            context.user_data['course_name'] = course_name
            if course_name in courses:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
                await update.message.reply_text(" –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç.",
                                                reply_markup=ReplyKeyboardRemove())
                context.user_data['step'] = 'age'
            else:
                await update.message.reply_text(
                    " –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

        elif step == 'age':
            age_input = update.message.text
            try:
                age = int(age_input)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                if 15 <= age <= 25:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    context.user_data['age'] = age
                    await update.message.reply_text(
                        " –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑—Ä–∞—Å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ (–æ—Ç 1 –¥–æ 4).",
                        reply_markup=await get_tag_keyboard())
                    context.user_data['step'] = 'tags'
                else:
                    await update.message.reply_text(" –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 15 –¥–æ 25 –ª–µ—Ç.")
            except ValueError:
                await update.message.reply_text(" –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")
        elif step == 'tags':
            selected_tag = update.message.text
            if selected_tag == "–ì–æ—Ç–æ–≤–æ":
                if 'tags' in context.user_data and context.user_data['tags']:
                    await update.message.reply_text(
                        f" –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏: {', '.join(context.user_data['tags'])}. –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö "
                        f"—É–≤–ª–µ—á–µ–Ω–∏—è—Ö.",
                        reply_markup=await get_interests_keyboard())
                    context.user_data['step'] = 'interests'
                else:
                    await update.message.reply_text(" –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–≥–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥.")
            else:
                tags = await get_tag_keyboard_options()
                if selected_tag in tags:
                    if 'tags' not in context.user_data:
                        context.user_data['tags'] = []
                    current_tags = context.user_data['tags']

                    if selected_tag in current_tags:
                        current_tags.remove(selected_tag)  # –£–±—Ä–∞—Ç—å —Ç–µ–≥, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–Ω
                    elif len(current_tags) < 4:
                        current_tags.append(selected_tag)  # –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 4

                    context.user_data['tags'] = current_tags
                    await update.message.reply_text(
                        f" –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏: {', '.join(current_tags)}. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
                else:
                    await update.message.reply_text(" –ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–µ–≥–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

        elif step == 'interests':
            selected_interes = update.message.text
            if selected_interes == "–ì–æ—Ç–æ–≤–æ":
                if 'interests' in context.user_data and context.user_data['interests']:
                    await update.message.reply_text(
                        f" –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(context.user_data['interests'])}. –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ.",
                        reply_markup=ReplyKeyboardRemove())
                    context.user_data['step'] = 'info'
                else:
                    await update.message.reply_text(" –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥.")
            else:
                interests = await get_interests_keyboard_options()
                if selected_interes in interests:
                    if 'interests' not in context.user_data:
                        context.user_data['interests'] = []
                    current_interests = context.user_data['interests']

                    if selected_interes in current_interests:
                        current_interests.remove(selected_interes)  # –£–±—Ä–∞—Ç—å —Ç–µ–≥, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–Ω
                    elif len(current_interests) < 4:
                        current_interests.append(selected_interes)  # –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 4

                    context.user_data['interests'] = current_interests
                    await update.message.reply_text(
                        f" –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(current_interests)}. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è "
                        f"–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
                else:
                    await update.message.reply_text(" –ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–µ–≥–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        elif step == 'info':
            info = update.message.text
            context.user_data['info'] = info
            await update.message.reply_text(" –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ.",
                                            reply_markup=await get_gender_keyboard())
            context.user_data['step'] = 'preferences'
        elif step == 'preferences':
            preferences = update.message.text
            if preferences in ["–ü–∞—Ä–Ω—è", "–î–µ–≤—É—à–∫—É"]:
                context.user_data['preferences'] = preferences
                await update.message.reply_text(" –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.",
                                                reply_markup=ReplyKeyboardRemove())
                context.user_data['step'] = 'photo'
            else:
                await update.message.reply_text(" –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ: '–ü–∞—Ä–Ω—è' –∏–ª–∏ '–î–µ–≤—É—à–∫—É'.")

    elif not context.user_data.get('registering'):
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")


async def get_interests_keyboard():
    tags = ["–°–ø–æ—Ä—Ç", "–ú—É–∑—ã–∫–∞", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ù–∞—É–∫–∞", "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "–ì–æ—Ç–æ–≤–æ"]
    keyboard = ReplyKeyboardMarkup([[tag] for tag in tags], one_time_keyboard=True, resize_keyboard=True)
    return keyboard

async def get_interests_keyboard_options():
    return ["–°–ø–æ—Ä—Ç", "–ú—É–∑—ã–∫–∞", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ù–∞—É–∫–∞", "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "–ì–æ—Ç–æ–≤–æ"]

async def get_tag_keyboard():
    tags = ["–ù–∞_–æ–¥–Ω—É_–Ω–æ—á—å", "–ì–æ—Ç–æ–≤–æ"]
    keyboard = ReplyKeyboardMarkup([[tag] for tag in tags], one_time_keyboard=True, resize_keyboard=True)
    return keyboard

async def get_tag_keyboard_options():
    return ["–ù–∞_–æ–¥–Ω—É_–Ω–æ—á—å"]


async def get_gender_keyboard():
    keyboard = ReplyKeyboardMarkup([["–ü–∞—Ä–Ω—è"], ["–î–µ–≤—É—à–∫—É"]], one_time_keyboard=True, resize_keyboard=True)
    return keyboard


async def get_gender_keyboard_yourself():
    keyboard = ReplyKeyboardMarkup([["–ü–∞—Ä–µ–Ω—å"], ["–î–µ–≤—É—à–∫–∞"]], one_time_keyboard=True, resize_keyboard=True)
    return keyboard


async def get_course():
    keyboard = ReplyKeyboardMarkup([[course] for course in courses], one_time_keyboard=False, resize_keyboard=True)
    return keyboard



# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if context.user_data.get('registering') and context.user_data.get('step') == 'photo':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo_file = update.message.photo[-1].file_id
        name = context.user_data.get('name')
        info = context.user_data.get('info')
        course = context.user_data.get('course')
        course_name = context.user_data.get('course_name')
        age = context.user_data.get('age')
        tags = ', '.join(['#' + tag for tag in context.user_data.get('tags', [])])  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #—Ç—ç–≥
        interests = ', '.join(
            ['#' + interes for interes in context.user_data.get('interests', [])])  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #—Ç—ç–≥
        preferences = context.user_data.get('preferences')
        gender = context.user_data.get('gender')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        cursor.execute(
            'INSERT INTO users (id, username, name, course, course_name, age, tags, info, preferences, interests, '
            'gender , photo,'
            'matches) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            (user_id, update.message.from_user.username, name, course, course_name, age, tags, info, preferences,
             interests, gender, photo_file, '')
        )
        conn.commit()

        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data['registering'] = False
        context.user_data['step'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥

        await update.message.reply_text(
            "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /profile."
        )
    else:
        await update.message.reply_text("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.")
