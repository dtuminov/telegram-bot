import logging
import sqlite3
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

from handlers.profile import profile
from init import conn, cursor
from init import create_menu_keyboard


async def find_match(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()

    if user is None:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return

    # –ò–∑–≤–ª–µ—á—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–æ–ª—É
    user_preferences = user[8]

    if user_preferences == '–ü–∞—Ä–Ω—è':
        user_preferences = '–ü–∞—Ä–µ–Ω—å'
    elif user_preferences == '–î–µ–≤—É—à–∫—É':
        user_preferences = '–î–µ–≤—É—à–∫–∞'

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ø–æ–ª—É
    cursor.execute('SELECT * FROM users WHERE id != ? AND gender = ?', (user_id, user_preferences))
    potential_matches = cursor.fetchall()

    if not potential_matches:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")
        return

    context.user_data['potential_matches'] = potential_matches
    context.user_data['match_index'] = 0

    await show_next_match(update, context)


async def show_next_match(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    potential_matches = context.user_data.get('potential_matches')
    match_index = context.user_data.get('match_index', 0)

    if potential_matches and match_index < len(potential_matches):
        matched_user = potential_matches[match_index]
        user_photo = matched_user[9]
        name = matched_user[2]
        course = matched_user[3]
        faculty_name = matched_user[4]
        age = matched_user[5]
        tags = matched_user[6]
        info = matched_user[7]
        preferences = matched_user[8]



        reply_markup = ReplyKeyboardMarkup(
            [["‚ù§Ô∏è", "üíî"], ["‚úâÔ∏è", "üö™"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        profile_info = (
            f"–ò–º—è: {name}, {age} –ª–µ—Ç\n\n"
            f"–ö—É—Ä—Å: {course} –∫—É—Ä—Å, {faculty_name} üéì\n\n"
            f"üè∑Ô∏è –¢–µ–≥–∏: {tags}\n"
            f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {info}\n"
            f"üí¨ –Ø –∏—â—É: {preferences}\n"
        )

        await context.bot.send_photo(
            chat_id=update.message.from_user.id,
            photo=user_photo,
            caption=profile_info,
            reply_markup=reply_markup
        )

        # Increase the index for the next match
        context.user_data['match_index'] += 1
    else:
        await update.message.reply_text("–≠—Ç–æ –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /find_match, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                                        reply_markup=create_menu_keyboard())


async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text.lower()
    user_id = update.message.from_user.id

    potential_matches = context.user_data.get('potential_matches')
    match_index = context.user_data.get('match_index', 0)

    if user_input == '‚ù§Ô∏è':
        await handle_like(update, context, potential_matches, match_index, user_id)
    elif user_input == 'üíî':
        await handle_dislike(update, context)
    elif user_input == "‚úâÔ∏è":
        await update.message.reply_text("–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?")
        context.user_data['awaiting_message'] = True
    elif user_input == 'üö™':
        await update.message.reply_text("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é...",
                                        reply_markup=create_menu_keyboard())
        context.user_data['potential_matches'] = False
        await profile(update, context)
    else:
        await update.message.reply_text("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.")


async def handle_like(update, context, potential_matches, match_index, user_id):
    if potential_matches and match_index > 0:
        liked_user_id = potential_matches[match_index - 1][0]
        cursor.execute('INSERT OR IGNORE INTO likes (user_id, liked_user_id) VALUES (?, ?)', (user_id, liked_user_id))
        conn.commit()

        await context.bot.send_message(chat_id=liked_user_id, text="–í–∞—Å –ª–∞–π–∫–Ω—É–ª–∏!")

        my_profile_data = cursor.execute(
            'SELECT name, age, course, course_name, tags, info, preferences, photo FROM users WHERE id = ?',
            (user_id,)).fetchone()

        if my_profile_data:
            my_name, my_age, my_course, my_course_name, my_tags, my_info, my_preferences, my_photo = my_profile_data
            my_profile_info = (
                f"–ò–º—è: {my_name}, {my_age} –ª–µ—Ç\n\n"
                f"–ö—É—Ä—Å: {my_course} –∫—É—Ä—Å, {my_course_name} üéì\n\n"
                f"üè∑Ô∏è –¢–µ–≥–∏: {my_tags}\n"
                f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {my_info}\n"
                f"üí¨ –Ø –∏—â—É: {my_preferences}\n"
            )

            reply_markup = ReplyKeyboardMarkup([["‚ù§Ô∏è", "üíî"]], resize_keyboard=True, one_time_keyboard=True)
            await context.bot.send_photo(chat_id=liked_user_id, photo=my_photo, caption=my_profile_info,
                                         reply_markup=reply_markup)

            await check_for_match(update, context, liked_user_id)

        await show_next_match(update, context)
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–∞–π–∫.")


async def handle_dislike(update: Update, context: ContextTypes.DEFAULT_TYPE):
    #await update.message.reply_text("–í—ã –¥–∏–∑–ª–∞–π–∫–Ω—É–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–µ—Ä–µ–π–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É!")
    await show_next_match(update, context)


async def check_for_match(update: Update, context: ContextTypes.DEFAULT_TYPE, liked_user_id: int) -> None:
    user_id = update.message.from_user.id

    cursor.execute('SELECT liked_user_id FROM likes WHERE user_id = ? AND liked_user_id = ?', (liked_user_id, user_id))
    match_check = cursor.fetchone()

    if match_check:
        await context.bot.send_message(chat_id=user_id, text="–£ –≤–∞—Å –º—ç—á! üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")
        await context.bot.send_message(chat_id=liked_user_id, text="–£ –≤–∞—Å –º—ç—á! üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if context.user_data.get('awaiting_message'):
        user_message = update.message.text
        potential_matches = context.user_data.get('potential_matches')
        match_index = context.user_data.get('match_index', 0)

        if potential_matches and match_index > 0:
            recipient_user_id = potential_matches[match_index - 1][0]
            await context.bot.send_message(chat_id=recipient_user_id,
                                           text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ üì•: {user_message}")
            await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üì§ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞.")
            context.user_data['awaiting_message'] = False
            await show_next_match(update, context)
